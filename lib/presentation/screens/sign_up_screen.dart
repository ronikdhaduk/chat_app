import 'package:chat_app/core/common/custom_button.dart';import 'package:chat_app/core/common/custom_text_field.dart';import 'package:chat_app/data/repository/auth_repository.dart';import 'package:flutter/gestures.dart';import 'package:flutter/material.dart';import '../../data/services/service_locator.dart';import '../../router/app_router.dart';class SignUpScreen extends StatefulWidget {  const SignUpScreen({super.key});  @override  State<SignUpScreen> createState() => _SignUpScreenState();}class _SignUpScreenState extends State<SignUpScreen> {  final _formKey = GlobalKey<FormState>();  final TextEditingController emailController = TextEditingController();  final TextEditingController nameController = TextEditingController();  final TextEditingController userNameController = TextEditingController();  final TextEditingController phoneController = TextEditingController();  final TextEditingController passwordController = TextEditingController();  bool isPasswordVisible = false;  final _nameFocus = FocusNode();  final _userNameFocus = FocusNode();  final _emailFocus = FocusNode();  final _phoneFocus = FocusNode();  final _passwordFocus = FocusNode();  @override  void dispose() {    emailController.dispose();    nameController.dispose();    userNameController.dispose();    phoneController.dispose();    passwordController.dispose();    _nameFocus.dispose();    _userNameFocus.dispose();    _emailFocus.dispose();    _phoneFocus.dispose();    _passwordFocus.dispose();    super.dispose();  }  String? _validateName(String? value) {    if (value == null || value.isEmpty) {      return "Please enter your full name";    }    return null;  }  String? _validateUserName(String? value) {    if (value == null || value.isEmpty) {      return "Please enter your username";    }    return null;  }  String? _validateEmail(String? value) {    if (value == null || value.isEmpty) {      return "Please enter your email address";    }    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');    if (!emailRegex.hasMatch(value)) {      return 'Enter a valid email address (e.g., example@gmail.com)';    }    return null;  }  String? _validatePhone(String? value) {    if (value == null || value.isEmpty) {      return 'Please enter your phone number';    }    final phoneRegex = RegExp(r'^\+?[\d\s-]{10,}$');    if (!phoneRegex.hasMatch(value)) {      return 'Please enter a valid phone number (e.g., +1234567890)';    }    return null;  }  String? _validatePassword(String? value) {    if (value == null || value.isEmpty) {      return "Please enter a password";    }    if (value.length < 6) {      return "Password must be at least 6 characters long";    }    return null;  }  Future<void> handleSignUp() async {    FocusScope.of(context).unfocus();    if (_formKey.currentState?.validate() ?? false) {      try {        getIt<AuthRepository>().signUp(            fullName: nameController.text,            userName: userNameController.text,            email: emailController.text,            phoneNumber: phoneController.text,            password: passwordController.text);      } catch (e) {        ScaffoldMessenger.of(context)            .showSnackBar(SnackBar(content: Text(e.toString())));      }    } else {      print("form validation failed");    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(),      body: SafeArea(        child: Form(          key: _formKey,          child: SingleChildScrollView(            padding: EdgeInsets.symmetric(horizontal: 20),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Text(                  "Create Account",                  style: Theme.of(context).textTheme.headlineMedium?.copyWith(                        fontWeight: FontWeight.bold,                      ),                ),                SizedBox(height: 10),                Text(                  "Please fill in the details to continue",                  style: Theme.of(                    context,                  ).textTheme.bodyLarge?.copyWith(color: Colors.grey),                ),                SizedBox(height: 30),                CustomTextField(                  controller: nameController,                  focusNode: _nameFocus,                  validator: _validateName,                  hintText: "Full Name",                  prefixIcon: Icon(Icons.person_outline),                ),                SizedBox(height: 15),                CustomTextField(                  controller: userNameController,                  focusNode: _userNameFocus,                  validator: _validateUserName,                  hintText: "User Name",                  prefixIcon: Icon(Icons.alternate_email),                ),                SizedBox(height: 15),                CustomTextField(                  controller: emailController,                  focusNode: _emailFocus,                  validator: _validateEmail,                  hintText: "Email",                  prefixIcon: Icon(Icons.email_outlined),                ),                SizedBox(height: 15),                CustomTextField(                  controller: phoneController,                  focusNode: _phoneFocus,                  validator: _validatePhone,                  hintText: "Phone",                  prefixIcon: Icon(Icons.phone_outlined),                ),                SizedBox(height: 15),                CustomTextField(                  controller: passwordController,                  focusNode: _passwordFocus,                  obscureText: !isPasswordVisible,                  validator: _validatePassword,                  hintText: "Password",                  prefixIcon: Icon(Icons.lock_outline),                  suffixIcon: IconButton(                      onPressed: () {                        setState(() {                          isPasswordVisible = !isPasswordVisible;                        });                      },                      icon: Icon(isPasswordVisible                          ? Icons.visibility                          : Icons.visibility_off)),                ),                SizedBox(height: 30),                CustomButton(onPressed: handleSignUp, text: "Create Account"),                SizedBox(height: 20),                Center(                  child: RichText(                    text: TextSpan(                      text: "Already have an account?  ",                      style: TextStyle(color: Colors.grey),                      children: [                        TextSpan(                          text: "Login",                          style: Theme.of(                            context,                          ).textTheme.bodyLarge?.copyWith(                                color: Theme.of(context).primaryColor,                                fontWeight: FontWeight.bold,                              ),                          recognizer: TapGestureRecognizer()                            ..onTap = () {                              // Navigator.pop(context);                              getIt<AppRouter>().pop();                            },                        ),                      ],                    ),                  ),                ),              ],            ),          ),        ),      ),    );  }}